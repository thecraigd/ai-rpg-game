# -*- coding: utf-8 -*-
"""AI Game - Game Runner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oyQRQwYB3mNK-ReYoR45xId5zxgG3blv
"""

!pip install -r requirements.txt

# Test that Gradio works - it doesn't really, but we'll fix it later

import gradio as gr
import os
demo = None #added to allow restart

def start_game(main_loop, share=False):
    # added code to support restart
    global demo
    # If demo is already running, close it first
    if demo is not None:
        demo.close()

    demo = gr.ChatInterface(
        main_loop,
        chatbot=gr.Chatbot(height=250, placeholder="Type 'start game' to begin"),
        textbox=gr.Textbox(placeholder="What do you do next?", container=False, scale=7),
        title="AI RPG",
        # description="Ask Yes Man any question",
        theme="soft",
        examples=["Look around", "Continue the story"],
        cache_examples=False,
        retry_btn="Retry",
        undo_btn="Undo",
        clear_btn="Clear",
                           )
    demo.launch(share=share, server_name="0.0.0.0")

def test_main_loop(message, history):
    return 'Entered Action: ' + message

start_game(test_main_loop)

def load_world(filename):
    with open(filename, 'r') as f:
        return json.load(f)


#def save_world(world, filename):
#    with open(filename, 'w') as f:
#       json.dump(world, f)

from google.colab import userdata
from together import Together
import json
import os

# First, get the API key from Colab's secrets
api_key = userdata.get('TOGETHER_API_KEY')

# Now initialize the client with the API key through the environment variable
os.environ["TOGETHER_API_KEY"] = api_key
client = Together()

# Load the world data into the below variables
world = load_world('scifi_world_data.json')
station = world['stations']['New Eden']
town = station['towns']["Verdant Spire"]
character = town['npcs']['Thelonious Rizq']

# Define the system prompt

system_prompt = """You are an AI Game master. Your job is to create a
start to a sci-fi adventure based on the world, station, town and character
a player is playing as.
Instructions:
You must only use 2-4 sentences \
Write in second person. For example: "You are Jack" \
Write in present tense. For example "You stand at..." \
First describe the character and their backstory. \
Then describes where they start and what they see around them."""
world_info = f"""
World: {world}
Station: {station}
Town: {town}
Your Character: {character}
"""

# Call the model
model_output = client.chat.completions.create(
    model="meta-llama/Llama-3-70b-chat-hf",
    temperature=1.0,
    messages=[
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": world_info + '\nYour Start:'}
    ],
)



start = model_output.choices[0].message.content
print(start)
world['start'] = start
save_world(world, 'YourWorld_L1.json')

"""# Creating the Main Action Loop"""

def run_action(message, history, game_state):

    if(message == 'start game'):
        return game_state['start']

    system_prompt = """You are an AI Game master. Your job is to write what \
happens next in a player's adventure game.\
Instructions: \
You must on only write 1-3 sentences in response. \
Always write in second person present tense. \
Ex. (You look north and see...)"""

    world_info = f"""
World: {game_state['world']}
Station: {game_state['station']}
Town: {game_state['town']}
Your Character:  {game_state['character']}"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": world_info}
    ]
    for action in history:
        messages.append({"role": "assistant", "content": action[0]})
        messages.append({"role": "user", "content": action[1]})

    messages.append({"role": "user", "content": message})
    model_output = client.chat.completions.create(
        model="meta-llama/Llama-3-70b-chat-hf",
        messages=messages
    )

    result = model_output.choices[0].message.content
    return result


game_state = {
    "world": world['description'],
    "station": station['description'],
    "town": town['description'],
    "character": character['description'],
    "start": start,
}

def main_loop(message, history):
    return run_action(message, history, game_state)

"""# Run the Game"""

start_game(main_loop, True)